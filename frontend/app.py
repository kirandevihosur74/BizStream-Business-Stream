import streamlit as st
import requests
import pandas as pd
import math
import time

API_URL = "http://api:8000/recommend"  # Or localhost if running locally

st.title("Business Matchmaker Recommendations")

# Animated data flow walkthrough
st.header("üöÄ Real-Time Data Flow Animation")
steps = [
    ("Producer", "A new business is generated by the Producer (Faker/Yelp)."),
    ("Kafka", "The business data is sent to the Kafka broker."),
    ("ETL", "The ETL Consumer receives and processes the data."),
    ("Redis", "The processed data is stored in Redis for fast access."),
    ("API", "The FastAPI service fetches the data from Redis."),
    ("Frontend", "The Streamlit frontend displays the recommendation to the user."),
]

if st.button("Show Data Flow Animation"):
    placeholders = [st.empty() for _ in steps]
    for i, (component, description) in enumerate(steps):
        for j, ph in enumerate(placeholders):
            if j == i:
                ph.markdown(f"**‚û°Ô∏è {component}: {description}**")
            else:
                ph.markdown(f"{steps[j][0]}: {steps[j][1]}")
        time.sleep(1.5)
    st.success("Sample business data has completed its journey through the system!")

# System design diagram
st.header("üó∫Ô∏è System Design Diagram")
st.write("The diagram below shows how data flows through the system, from producer to frontend, with each service running in its own container:")
st.image("system_flow.svg", caption="Real-Time System Data Flow", use_container_width=True)

# Add a refresh button
if st.button("Refresh Data"):
    st.rerun()

st.write("Fetching recommendations...")

try:
    response = requests.get(API_URL)
    response.raise_for_status()
    data = response.json()
    businesses = data.get("recommendations", [])
    if businesses:
        df = pd.DataFrame(businesses)
        # Pagination
        page_size = st.selectbox("Rows per page", [5, 10, 20, 50], index=1)
        total = len(df)
        total_pages = math.ceil(total / page_size)
        page = st.number_input("Page", min_value=1, max_value=total_pages, value=1, step=1)
        start = (page - 1) * page_size
        end = start + page_size
        st.write(f"Showing {start+1}-{min(end, total)} of {total} businesses")
        # Only show columns up to 'category'
        desired_columns = ["id", "name", "address", "city", "state", "rating", "category"]
        df = df[desired_columns]
        st.dataframe(df.iloc[start:end])
    else:
        st.info("No recommendations found.")
except Exception as e:
    st.error(f"Failed to fetch recommendations: {e}") 